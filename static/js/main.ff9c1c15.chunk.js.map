{"version":3,"sources":["components/Modal/Modal.js","components/PostEditor/PostEditor.js","components/PostsList/PostsList.js","redux/posts/postsActions.js","redux/posts/postsSelectors.js","components/PostsList/PostsListContainer.js","redux/posts/postsOperations.js","components/Post/Post.js","redux/comments/commentsActions.js","redux/comments/commentsSelectors.js","components/Post/PostContainer.js","redux/comments/commentsOperations.js","components/App.js","serviceWorker.js","redux/posts/postsReducers.js","redux/comments/commentsReducers.js","redux/store.js","index.js","components/Post/Post.module.css","components/PostsList/PostsList.module.css","components/PostEditor/PostEditor.module.css","components/Modal/Modal.module.css"],"names":["Modal","backdropRef","createRef","handleKeyPress","e","code","_this","props","onClose","handleBackdropClick","current","target","window","addEventListener","this","removeEventListener","children","react_default","a","createElement","className","css","backdrop","ref","onClick","modal","Component","TaskEditor","state","title","body","handleChange","_e$target","name","value","setState","Object","defineProperty","handleSubmit","preventDefault","onSave","_this$state","onCancel","formContainer","onSubmit","inputContent","type","onChange","placeholder","cols","rows","btn","PostsList","isCreating","openCreatePost","closeCreatePost","delPostById","id","delPost","createPost","post","addPost","objectSpread","_this2","_this$props","_this$props$items","items","location","main","list","map","item","key","Card","style","maxWidth","margin","minHeight","padding","overflow","cardCotent","react_router_dom","to","pathname","concat","from","link","toUpperCase","Button","height","variant","color","Modal_Modal","PostEditor_TaskEditor","ActionType","FETCH_POSTS_REQUEST","FETCH_POSTS_SUCCESS","FETCH_POSTS_ERROR","FETCH_POST_WITH_COMMENTS_REQUEST","FETCH_POST_WITH_COMMENTS_SUCCESS","FETCH_POST_WITH_COMMENTS_ERROR","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_ERROR","EDIT_POST_REQUEST","EDIT_POST_SUCCESS","EDIT_POST_ERROR","DEL_POST_REQUEST","DEL_POST_SUCCESS","DEL_POST_ERROR","getAllPosts","posts","getPostWithComments","mapDispatchToProps","dispatch","axios","then","res","data","payload","catch","error","addPostError","delete","delPostError","connect","getIdFromProps","match","params","Post","text","isEditing","selectedPostId","handleGoBack","history","push","addComment","postId","reset","openEditPostModal","closeEditPostModal","updatePost","_ref","editPost","fetchPostWithComment","_this$props2","comments","wrapper","postContainer","postBody","commentList","comment","commentItem","TextField","label","Icon","btnBack","getComments","get","fetchPostWithCommentsError","addCommentError","updatedPost","put","editPostError","postsSelectors","App","fetchPosts","fetchComments","react_router","path","exact","component","fetchPostsError","getCommentsError","Boolean","hostname","combineReducers","arguments","length","undefined","toConsumableArray","filter","_ref2","loading","ADD_POSTS_ERROR","_ref4","commentsReducer","rootReducer","postsReducer","store","createStore","composeWithDevTools","applyMiddleware","ReduxThunk","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","cardContent","labelSelect"],"mappings":"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","file":"static/js/main.ff9c1c15.chunk.js","sourcesContent":["import React, { Component, createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport css from './Modal.module.css';\n\nexport default class Modal extends Component {\n  static propTypes = {\n    onClose: PropTypes.func.isRequired,\n    children: PropTypes.shape().isRequired,\n  };\n\n  backdropRef = createRef();\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyPress);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyPress);\n  }\n\n  handleKeyPress = e => {\n    if (e.code !== 'Escape') return;\n\n    this.props.onClose();\n  };\n\n  handleBackdropClick = e => {\n    const { current } = this.backdropRef;\n\n    if (current && e.target !== current) {\n      return;\n    }\n\n    this.props.onClose();\n  };\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <div\n        className={css.backdrop}\n        ref={this.backdropRef}\n        onClick={this.handleBackdropClick}\n      >\n        <div className={css.modal}>{children}</div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport css from './PostEditor.module.css';\r\n\r\nexport default class TaskEditor extends Component {\r\n  static propTypes = {\r\n    onSave: PropTypes.func.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    title: PropTypes.string,\r\n    body: PropTypes.string,\r\n  };\r\n\r\n\r\n  state = {\r\n    title: \"\",\r\n    body: \"\",\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\nthis.props.onSave(this.state)\r\n  };\r\n\r\n  reset() {\r\n    this.setState({\r\n      title: '',\r\n      body: '',\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { title, body } = this.state;\r\n    const { onCancel } = this.props;\r\n\r\n    return (\r\n      <form className={css.formContainer} onSubmit={this.handleSubmit}>\r\n        <input\r\n          className={css.inputContent}\r\n          type=\"text\"\r\n          name=\"title\"\r\n          value={title}\r\n          onChange={this.handleChange}\r\n          placeholder=\"Title\"\r\n        />\r\n        <textarea\r\n          placeholder=\"Text\"\r\n          type=\"text\"\r\n          name=\"body\"\r\n          cols=\"40\"\r\n          rows=\"5\"\r\n          value={body}\r\n          onChange={this.handleChange}\r\n        />\r\n\r\n        <div>\r\n          <button type=\"submit\" className={css.btn}>\r\n            Save\r\n          </button>\r\n          <button type=\"button\" className={css.btn} onClick={onCancel}>\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport Modal from \"../Modal/Modal\";\r\nimport PostEditor from \"../PostEditor/PostEditor\";\r\nimport css from \"./PostsList.module.css\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nclass PostsList extends Component {\r\n  static propTypes = {\r\n    addPost: PropTypes.func.isRequired,\r\n    items: PropTypes.arrayOf(PropTypes.shape().isRequired).isRequired,\r\n    location: PropTypes.shape().isRequired\r\n  };\r\n\r\n  state = {\r\n    isCreating: false,\r\n  };\r\n\r\n  openCreatePost = () => {\r\n    this.setState({ isCreating: true });\r\n  };\r\n\r\n  closeCreatePost = () => {\r\n    this.setState({ isCreating: false });\r\n  };\r\n\r\n  delPostById = id => {\r\n    this.props.delPost(id);\r\n  };\r\n\r\n  createPost = post => {\r\n    const { addPost } = this.props;\r\n    const postToAdd = {\r\n      ...post\r\n    };\r\n\r\n    addPost(postToAdd);\r\n\r\n    this.closeCreatePost();\r\n  };\r\n\r\n  render() {\r\n    const { items = [], location } = this.props;\r\n    const { isCreating } = this.state;\r\n\r\n    return (\r\n      <div className={css.main}>\r\n        <h2>Posts</h2>\r\n        <ul className={css.list}>\r\n          {items.map(item => (\r\n            <li key={item.id} className={css.item}>\r\n              <Card\r\n                style={{\r\n                  maxWidth: \"80%\",\r\n                  margin: \"25px auto\",\r\n                  minHeight: \"100px\",\r\n                  padding: \"12px\",\r\n                  overflow: \"hidden\"\r\n                }}\r\n              >\r\n                <div className={css.cardCotent}>\r\n                  <Link\r\n                    to={{\r\n                      pathname: `/posts/${item.id}`,\r\n                      state: { from: location }\r\n                    }}\r\n                    className={css.link}\r\n                  >\r\n                    <h3>\r\n                      {item.title ? item.title.toUpperCase() : \"NO TITLE\"}\r\n                    </h3>\r\n                  </Link>\r\n                  <Button\r\n                    type=\"button\"\r\n                    onClick={() => this.delPostById(item.id)}\r\n                    style={{\r\n                      margin: \"0 auto\",\r\n                      height: \"35px\"\r\n                    }}\r\n                    variant=\"contained\"\r\n                  >\r\n                    Delete Post\r\n                  </Button>\r\n                </div>\r\n              </Card>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={this.openCreatePost}\r\n          style={{\r\n            margin: \"0 auto\",\r\n            height: \"55px\"\r\n          }}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Create Post\r\n        </Button>\r\n        {isCreating && (\r\n          <Modal onClose={this.closeCreatePost}>\r\n            <PostEditor\r\n              onSave={this.createPost}\r\n              onCancel={this.closeCreatePost}\r\n            />\r\n          </Modal>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostsList;\r\n","export const ActionType = {\r\n  FETCH_POSTS_REQUEST: 'FETCH_POSTS_REQUEST',\r\n  FETCH_POSTS_SUCCESS: 'FETCH_POSTS_SUCCESS',\r\n  FETCH_POSTS_ERROR: 'FETCH_POSTS_ERROR',\r\n  FETCH_POST_WITH_COMMENTS_REQUEST: 'FETCH_POST_WITH_COMMENTS_REQUEST',\r\n  FETCH_POST_WITH_COMMENTS_SUCCESS: 'FETCH_POST_WITH_COMMENTS_SUCCESS',\r\n  FETCH_POST_WITH_COMMENTS_ERROR: 'FETCH_POST_WITH_COMMENTS_ERROR',\r\n  ADD_POST_REQUEST: 'ADD_POST_REQUEST',\r\n  ADD_POST_SUCCESS: 'ADD_POST_SUCCESS',\r\n  ADD_POST_ERROR: 'ADD_POST_ERROR',\r\n  EDIT_POST_REQUEST: 'EDIT_POST_REQUEST',\r\n  EDIT_POST_SUCCESS: 'EDIT_POST_SUCCESS',\r\n  EDIT_POST_ERROR: 'EDIT_POST_ERROR',\r\n  DEL_POST_REQUEST: 'DEL_POST_REQUEST',\r\n  DEL_POST_SUCCESS: 'DEL_POST_SUCCESS',\r\n  DEL_POST_ERROR: 'DEL_POST_ERROR',\r\n};\r\n\r\n// FETCH_POSTS\r\n\r\nexport const fetchPostsRequest = () => ({\r\n  type: ActionType.FETCH_POSTS_REQUEST,\r\n});\r\n\r\nexport const fetchPostsSuccess = posts => ({\r\n  type: ActionType.FETCH_POSTS_SUCCESS,\r\n  payload: {\r\n    posts,\r\n  },\r\n});\r\n\r\nexport const fetchPostsError = error => ({\r\n  type: ActionType.FETCH_POSTS_ERROR,\r\n  payload: {\r\n    error,\r\n  },\r\n});\r\n\r\n// FETCH_POST_WITH_COMMENTS\r\n\r\nexport const fetchPostWithCommentsRequest = () => ({\r\n  type: ActionType.FETCH_POST_WITH_COMMENTS_REQUEST,\r\n});\r\n\r\nexport const fetchPostWithCommentsSuccess = post => ({\r\n  type: ActionType.FETCH_POST_WITH_COMMENTS_SUCCESS,\r\n  payload: {\r\n    post,\r\n  },\r\n});\r\n\r\nexport const fetchPostWithCommentsError = error => ({\r\n  type: ActionType.FETCH_POST_WITH_COMMENTS_ERROR,\r\n  payload: {\r\n    error,\r\n  },\r\n});\r\n\r\n// ADD_POST\r\n\r\nexport const addPostRequest = () => ({\r\n  type: ActionType.ADD_POST_REQUEST,\r\n});\r\n\r\nexport const addPostSuccess = post => ({\r\n  type: ActionType.ADD_POST_SUCCESS,\r\n  payload: {\r\n    post,\r\n  },\r\n});\r\n\r\nexport const addPostError = error => ({\r\n  type: ActionType.ADD_POST_ERROR,\r\n  payload: {\r\n    error,\r\n  },\r\n});\r\n\r\n// EDIT_POST\r\n\r\nexport const editPostRequest = () => ({\r\n  type: ActionType.EDIT_POST_REQUEST,\r\n});\r\n\r\nexport const editPostSuccess = (id, updatedPost) => ({\r\n  type: ActionType.EDIT_POST_SUCCESS,\r\n  payload: {\r\n    id,\r\n    updatedPost,\r\n  },\r\n});\r\n\r\nexport const editPostError = error => ({\r\n  type: ActionType.EDIT_POST_ERROR,\r\n  payload: {\r\n    error,\r\n  },\r\n});\r\n// DEL_POST\r\n\r\nexport const delPostRequest = () => ({\r\n  type: ActionType.DEL_POST_REQUEST,\r\n});\r\n\r\nexport const delPostSuccess = (id) => ({\r\n  type: ActionType.DEL_POST_SUCCESS,\r\n  payload: id,\r\n});\r\n\r\nexport const delPostError = error => ({\r\n  type: ActionType.DEL_POST_ERROR,\r\n  payload: {\r\n    error,\r\n  },\r\n});\r\n","export const getAllPosts = state => state.posts.items;\n\nexport const getPostWithComments = state => state.posts.item;\n","import { connect } from \"react-redux\";\r\nimport PostsList from \"./PostsList\";\r\nimport { addPost, delPost } from \"../../redux/posts/postsOperations\";\r\nimport { getAllPosts } from \"../../redux/posts/postsSelectors\";\r\n\r\nconst mapStateToProps = state => ({\r\n  items: getAllPosts(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addPost,\r\n  delPost\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PostsList);\r\n","import axios from 'axios';\r\nimport {\r\n  fetchPostsRequest,\r\n  fetchPostsSuccess,\r\n  fetchPostsError,\r\n  fetchPostWithCommentsRequest,\r\n  fetchPostWithCommentsSuccess,\r\n  fetchPostWithCommentsError,\r\n  addPostRequest,\r\n  addPostSuccess,\r\n  addPostError,\r\n  editPostRequest,\r\n  editPostSuccess,\r\n  editPostError,\r\n  delPostRequest,\r\n  delPostSuccess,\r\n  delPostError,\r\n} from './postsActions';\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n  dispatch(fetchPostsRequest());\r\n  axios\r\n    .get('https://bloggy-api.herokuapp.com/posts')\r\n    .then(res => {\r\n      dispatch(fetchPostsSuccess(res.data));\r\n    })\r\n    .catch(error => {\r\n      dispatch(fetchPostsError(error));\r\n    });\r\n};\r\n\r\nexport const fetchPostWithComment = id => dispatch => {\r\n  dispatch(fetchPostWithCommentsRequest());\r\n\r\n  axios\r\n    .get(`https://bloggy-api.herokuapp.com/posts/${id}?_embed=comments`)\r\n    .then(res => {\r\n      dispatch(fetchPostWithCommentsSuccess(res.data));\r\n    })\r\n    .catch(error => {\r\n      dispatch(fetchPostWithCommentsError(error));\r\n    });\r\n};\r\n\r\nexport const addPost = post => dispatch => {\r\n  dispatch(addPostRequest());\r\n\r\n  axios\r\n    .post('https://bloggy-api.herokuapp.com/posts', post)\r\n    .then(res => {\r\n      dispatch(addPostSuccess(res.data));\r\n    })\r\n    .catch(error => {\r\n      dispatch(addPostError(error));\r\n    });\r\n};\r\n\r\nexport const editPost = (id, updatedPost) => dispatch => {\r\n  dispatch(editPostRequest());\r\n\r\n  axios\r\n    .put(`https://bloggy-api.herokuapp.com/posts/${id}`, updatedPost)\r\n    .then(res => {\r\n      dispatch(editPostSuccess(res.data));\r\n    })\r\n    .catch(error => {\r\n      dispatch(editPostError(error));\r\n    });\r\n};\r\n\r\nexport const delPost = (id) => dispatch => {\r\n  dispatch(delPostRequest());\r\n\r\n  axios\r\n    .delete(`https://bloggy-api.herokuapp.com/posts/${id}`)\r\n    .then(res => {\r\n      dispatch(delPostSuccess(res.data));\r\n    })\r\n    .catch(error => {\r\n      dispatch(delPostError(error));\r\n    });\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Modal from '../Modal/Modal';\r\nimport PostEditor from '../PostEditor/PostEditor';\r\nimport css from './Post.module.css';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst getIdFromProps = props => props.match.params.id;\r\n\r\nclass Post extends Component {\r\n  static propTypes = {\r\n    fetchPostWithComment: PropTypes.func.isRequired,\r\n    addComment: PropTypes.func.isRequired,\r\n    history: PropTypes.shape().isRequired,\r\n    location: PropTypes.shape().isRequired,\r\n    items: PropTypes.shape().isRequired,\r\n    comments: PropTypes.arrayOf(PropTypes.shape().isRequired).isRequired,\r\n    editPost: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    text: '',\r\n    isEditing: false,\r\n    selectedPostId: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { fetchPostWithComment } = this.props;\r\n    const id = getIdFromProps(this.props);\r\n\r\n    this.setState({\r\n      selectedPostId: id,\r\n    });\r\n\r\n    fetchPostWithComment(id);\r\n  }\r\n\r\n  handleGoBack = () => {\r\n    const { history, location } = this.props;\r\n    if (location.state) {\r\n      return history.push(location.state.from);\r\n    }\r\n\r\n    return history.push('/');\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      text: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { addComment } = this.props;\r\n    const { text } = this.state;\r\n    const comment = {\r\n      postId: getIdFromProps(this.props),\r\n      body: text,\r\n    };\r\n    addComment(comment);\r\n    this.reset();\r\n  };\r\n\r\n  // Update post\r\n\r\n  openEditPostModal = () => {\r\n    this.setState({\r\n      isEditing: true,\r\n    });\r\n  };\r\n\r\n  closeEditPostModal = () => {\r\n    this.setState({\r\n      isEditing: false,\r\n    });\r\n  };\r\n\r\n  updatePost = ({ title, body }) => {\r\n    const { editPost } = this.props;\r\n    const { selectedPostId } = this.state;\r\n    editPost(selectedPostId, { title, body });\r\n    this.closeEditPostModal();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      text: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { items, comments } = this.props;\r\n    const { text, isEditing, selectedPostId } = this.state;\r\n\r\n    return (\r\n      <article className={css.wrapper}>\r\n\r\n        <div className={css.postContainer}>\r\n          <h2>{items.title}</h2>\r\n          <p className={css.postBody}>{items.body}</p>\r\n          <ul className={css.commentList}>\r\n\r\n            {comments &&\r\n              comments.map(comment => comment.postId === selectedPostId && (\r\n                <li key={comment.id} className={css.commentItem}>\r\n                  {comment.body}\r\n                </li>\r\n              ))}\r\n          </ul>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <TextField\r\n              label=\"Your comment\"\r\n              margin=\"normal\"\r\n              type=\"text\"\r\n              name=\"text\"\r\n              variant=\"outlined\"\r\n              value={text}\r\n              onChange={this.handleChange}\r\n            />\r\n            <Button\r\n              style={{\r\n                margin: \"15px\",\r\n                height: \"55px\",\r\n              }}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\">\r\n              <Icon >send</Icon>\r\n            </Button>\r\n\r\n          </form>\r\n        </div>\r\n\r\n        {isEditing && (\r\n          <Modal onClose={this.closeEditPostModal}>\r\n            <PostEditor\r\n              onSave={this.updatePost}\r\n              onCancel={this.closeEditPostModal}\r\n              title={items.title}\r\n              body={items.body}\r\n            />\r\n          </Modal>\r\n        )}\r\n        <Button\r\n          style={{\r\n            margin: \"15px\",\r\n            height: \"55px\",\r\n          }}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          type=\"button\"\r\n          className={css.btnBack}\r\n          onClick={this.handleGoBack}\r\n        >\r\n          Go back\r\n        </Button>\r\n        <Button style={{\r\n          margin: \"15px\",\r\n          height: \"55px\",\r\n        }}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n\r\n          type=\"button\" onClick={this.openEditPostModal}>\r\n          Edit\r\n        </Button>\r\n\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Post;\r\n","export const ActionType = {\r\n  ADD_COMMENT_REQUEST: 'ADD_COMMENT_REQUEST',\r\n  ADD_COMMENT_SUCCESS: 'ADD_COMMENT_SUCCESS',\r\n  ADD_COMMENT_ERROR: 'ADD_COMMENT_ERROR',\r\n  GET_COMMENT_REQUEST: 'GET_COMMENT_REQUEST',\r\n  GET_COMMENT_SUCCESS: 'GET_COMMENT_SUCCESS',\r\n  GET_COMMENT_ERROR: 'GET_COMMENT_ERROR',\r\n};\r\n\r\n// ADD_COMMENT\r\n\r\nexport const addCommentRequest = () => ({\r\n  type: ActionType.ADD_COMMENT_REQUEST,\r\n});\r\n\r\nexport const addCommentSuccess = (comment) => ({\r\n  type: ActionType.ADD_COMMENT_SUCCESS,\r\n  payload: comment,\r\n});\r\n\r\nexport const addCommentError = error => ({\r\n  type: ActionType.ADD_COMMENT_ERROR,\r\n  payload: {\r\n    error,\r\n  },\r\n});\r\nexport const getCommentsRequest = () => ({\r\n  type: ActionType.GET_COMMENT_REQUEST,\r\n});\r\n\r\nexport const getCommentsSuccess = (comments) => ({\r\n  type: ActionType.GET_COMMENT_SUCCESS,\r\n  payload: comments,\r\n});\r\n\r\nexport const getCommentsError = error => ({\r\n  type: ActionType.GET_COMMENT_ERROR,\r\n  payload: {\r\n    error,\r\n  },\r\n});\r\n","export const getComments = state =>\r\n  state.comments;\r\n\r\n// DUMMY\r\nexport const dummy = () => null;\r\n","import { connect } from 'react-redux';\r\nimport Post from './Post';\r\nimport * as postsOperations from '../../redux/posts/postsOperations';\r\nimport * as commentsOperations from '../../redux/comments/commentsOperations';\r\nimport * as postsSelectors from '../../redux/posts/postsSelectors';\r\nimport { getComments } from '../../redux/comments/commentsSelectors';\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  items: postsSelectors.getPostWithComments(state),\r\n  comments: getComments(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  fetchPostWithComment: postsOperations.fetchPostWithComment,\r\n  addComment: commentsOperations.addComment,\r\n  editPost: postsOperations.editPost,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(Post);\r\n","import axios from 'axios';\r\nimport {\r\n  addCommentRequest,\r\n  addCommentSuccess,\r\n  addCommentError,\r\n  getCommentsRequest,\r\n  getCommentsSuccess,\r\n  getCommentsError,\r\n} from './commentsActions';\r\n\r\nexport const addComment = comment => dispatch => {\r\n  dispatch(addCommentRequest());\r\n\r\n  axios\r\n    .post('https://bloggy-api.herokuapp.com/comments', comment)\r\n    .then(res => {\r\n      dispatch(addCommentSuccess(res.data));\r\n    })\r\n    .catch(error => {\r\n      dispatch(addCommentError(error));\r\n    });\r\n};\r\nexport const getComments = comments => dispatch => {\r\n  dispatch(getCommentsRequest(comments));\r\n\r\n  axios\r\n    .get('https://bloggy-api.herokuapp.com/comments')\r\n    .then(res => {\r\n      dispatch(getCommentsSuccess(res.data));\r\n    })\r\n    .catch(error => {\r\n      dispatch(getCommentsError(error));\r\n    });\r\n};\r\n\r\n// DUMMY\r\nexport const dummy = () => null;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport PostsList from './PostsList/PostsListContainer';\r\nimport Post from './Post/PostContainer';\r\nimport * as postsOperations from '../redux/posts/postsOperations';\r\nimport * as commentsOperations from '../redux/comments/commentsOperations';\r\n\r\nclass App extends Component {\r\n\r\n\r\n  componentDidMount() {\r\n    this.props.fetchPosts();\r\n    this.props.fetchComments();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        \r\n        <Switch>\r\n          <Route path=\"/\" exact component={PostsList} />\r\n          <Route path=\"/posts/:id\" component={Post} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  fetchPosts: postsOperations.fetchPosts,\r\n  fetchComments: commentsOperations.getComments,\r\n};\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps,\r\n)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { ActionType } from \"./postsActions\";\r\n\r\nconst itemsReducer = (state = [], { type, payload }) => {\r\n  switch (type) {\r\n    case ActionType.FETCH_POSTS_SUCCESS:\r\n      return payload.posts;\r\n\r\n    case ActionType.ADD_POST_SUCCESS:\r\n      return [...state, payload.post];\r\n\r\n    case ActionType.EDIT_POST_SUCCESS:\r\n      return state.map(post =>\r\n        post.id === payload.id ? payload.updatedPost : post\r\n      );\r\n    case ActionType.DEL_POST_SUCCESS:\r\n      return state.filter(post => post.id !== payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst itemReducer = (state = {}, { type, payload }) => {\r\n  switch (type) {\r\n    case ActionType.FETCH_POST_WITH_COMMENTS_SUCCESS:\r\n      return payload.post;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst loadingReducer = (state = false, { type }) => {\r\n  switch (type) {\r\n    case ActionType.FETCH_POSTS_REQUEST:\r\n    case ActionType.FETCH_POST_WITH_COMMENTS_REQUEST:\r\n    case ActionType.ADD_POST_REQUEST:\r\n    case ActionType.EDIT_POST_REQUEST:\r\n    case ActionType.DEL_POST_REQUEST:\r\n      return true;\r\n    case ActionType.FETCH_POSTS_SUCCESS:\r\n    case ActionType.FETCH_POSTS_ERROR:\r\n    case ActionType.FETCH_POST_WITH_COMMENTS_SUCCESS:\r\n    case ActionType.FETCH_POST_WITH_COMMENTS_ERROR:\r\n    case ActionType.ADD_POST_SUCCESS:\r\n    case ActionType.ADD_POSTS_ERROR:\r\n    case ActionType.EDIT_POST_SUCCESS:\r\n    case ActionType.EDIT_POST_ERROR:\r\n    case ActionType.DEL_POST_SUCCESS:\r\n    case ActionType.DEL_POST_ERROR:\r\n      return false;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst errorReducer = (state = null, { type, payload }) => {\r\n  switch (type) {\r\n    case ActionType.FETCH_POSTS_REQUEST:\r\n    case ActionType.FETCH_POST_WITH_COMMENTS_REQUEST:\r\n    case ActionType.ADD_POST_REQUEST:\r\n    case ActionType.EDIT_POST_REQUEST:\r\n      return null;\r\n\r\n    case ActionType.FETCH_POSTS_ERROR:\r\n    case ActionType.FETCH_POST_WITH_COMMENTS_ERROR:\r\n    case ActionType.ADD_POSTS_ERROR:\r\n    case ActionType.EDIT_POST_ERROR:\r\n      return payload.error;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default combineReducers({\r\n  items: itemsReducer,\r\n  item: itemReducer,\r\n  loading: loadingReducer,\r\n  error: errorReducer\r\n});\r\n","import { ActionType } from \"./commentsActions\";\r\n\r\nconst commentsReducer = (state = [], { type, payload }) => {\r\n  switch (type) {\r\n    case ActionType.ADD_COMMENT_SUCCESS:\r\n      return [...state, payload];\r\n    case ActionType.GET_COMMENT_SUCCESS:\r\n      return  payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nexport default  commentsReducer;\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport ReduxThunk from 'redux-thunk';\nimport postsReducer from './posts/postsReducers';\nimport commentsReducer from './comments/commentsReducers';\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  comments: commentsReducer,\n});\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(ReduxThunk)),\n);\n\nexport default store;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Post_wrapper__2ktZF\",\"postBody\":\"Post_postBody__czZIR\",\"commentList\":\"Post_commentList__2sJFY\",\"commentItem\":\"Post_commentItem__20Dd8\",\"btnBack\":\"Post_btnBack__359jN\",\"btn\":\"Post_btn__3XGEv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"PostsList_list__1gkp3\",\"item\":\"PostsList_item__2-Up-\",\"link\":\"PostsList_link__nD2xp\",\"main\":\"PostsList_main__1OcD6\",\"cardContent\":\"PostsList_cardContent__2o8R6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"PostEditor_formContainer__2MaXb\",\"inputContent\":\"PostEditor_inputContent__3jD86\",\"labelSelect\":\"PostEditor_labelSelect__3FJbE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Modal_backdrop__2rq46\",\"modal\":\"Modal_modal__1Zat2\"};"],"sourceRoot":""}